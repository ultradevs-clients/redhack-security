"use client";
import { useEffect, useState } from "react";
import serviceImage1 from "@/assets/images/service-image-1.webp";
import serviceImage2 from "@/assets/images/service-image-1.webp";
import serviceImage3 from "@/assets/images/service-image-1.webp";
import serviceImage4 from "@/assets/images/service-image-1.webp";
import serviceImage5 from "@/assets/images/service-image-1.webp";

import Image from "next/image";
import { GoDotFill } from "react-icons/go";

const services = [
	{
		id: 1,
		title: "Requirements and Design",
		image: serviceImage1,
		desc: "At this initial phase, RedHack Security evaluates security requirements and design decisions to build a strong foundation.",
		list: [
			{
				item: "Threat Modeling: Identify potential risks and attack vectors based on the system’s architecture and design.",
			},
			{
				item: "Security Architecture Assessment: Examine the design for any security weaknesses or gaps.",
			},
			{
				item: "Secure Design Review: Analyze design documents and code snippets for possible security flaws.",
			},
			{
				item: "Typical Risks: Weak authentication, flawed access controls, risk of data exposure.",
			},
		],
	},
	{
		id: 2,
		title: "Development",
		image: serviceImage2,
		desc: "During the development phase, RedHack Security focuses on identifying vulnerabilities within the source code and development practices.",
		list: [
			{
				item: "Static Code Analysis: Use automated tools to scan source code for security issues.",
			},
			{
				item: "Manual Code Review: Experts manually inspect code to find vulnerabilities missed by automation.",
			},
			{
				item: "Security-focused Unit Testing: Developers create tests targeting security aspects of the application.",
			},
			{
				item: "Common Risks: Injection flaws (SQLi, XSS), insecure API usage, cryptographic weaknesses.",
			},
		],
	},
	{
		id: 3,
		title: "Testing",
		image: serviceImage3,
		desc: "In this phase, the focus shifts to dynamic testing of the live application and comprehensive security validation.",
		list: [
			{
				item: "Dynamic Vulnerability Scanning: Simulate attacks on the running application using specialized tools.",
			},
			{
				item: "Manual Penetration Testing: Security experts manually probe the application to uncover hidden issues.",
			},
			{
				item: "Input Validation Tests: Test with malicious inputs to uncover data validation gaps.",
			},
			{
				item: "Frequent Vulnerabilities: Cross-site scripting, CSRF, broken authentication, sensitive data leaks.",
			},
		],
	},
	{
		id: 4,
		title: "Deployment",
		image: serviceImage4,
		desc: "Before launching into production, RedHack Security verifies the security posture of the deployment environment.",
		list: [
			{
				item: "Configuration Audits: Review server and application configurations for security weaknesses.",
			},
			{
				item: "Network Security Assessments: Check firewalls, open ports, and network controls.",
			},
			{
				item: "Typical Issues: Misconfigurations, open or unnecessary ports, inadequate network defenses.",
			},
		],
	},
	{
		id: 5,
		title: "Maintenance",
		image: serviceImage5,
		desc: "Post-deployment, ongoing penetration testing helps detect vulnerabilities introduced by updates or environmental changes.",
		list: [
			{
				item: "Patch and Update Testing: Verify security patches do not introduce new risks.",
			},
			{
				item: "Regular Security Assessments: Conduct scheduled penetration tests to identify emerging threats.",
			},
			{
				item: "Common Concerns: Unpatched vulnerabilities, misconfigurations caused by updates or changes.",
			},
		],
	},
];

export default function DevsOpsSDLC() {
	const [currentServiceId, setCurrentServiceId] = useState(1);
	const [currentService, setCurrentService] = useState([]);
	const [dropdownOpen, setDropdownOpen] = useState(false);

	const handleService = (id) => {
		const result = services?.find((service) => service.id === id);
		setCurrentServiceId(id);
		setCurrentService(result);
	};

	useEffect(() => {
		handleService(1);
	}, []);

	return (
		<div className="text-background bg-accent lg:py-20 py-12  text-center border-t border-background/10 border-b lg:px-0 px-5">
			<div className="container">
				<h2>Penetration Testing Throughout All Phases of the SDLC</h2>
				<p className="opacity-80">
					RedHack Security’s SDLC penetration testing evaluates the
					security of your application throughout each phase of its
					development lifecycle.
				</p>

				<div className="bg-background/10 hidden md:block w-max overflow-x-auto mx-auto rounded-lg my-12">
					{services.length &&
						services?.map((service) => (
							<button
								key={service.id}
								onClick={() => handleService(service.id)}
								className={`btn-service-card ${
									currentServiceId === service.id
										? "bg-main"
										: "bg-transparent"
								}`}
							>
								{service.title}
							</button>
						))}
				</div>

				{/* Mobile Dropdown */}
				<div className="md:hidden w-full max-w-xs mx-auto mt-6 text-left">
					<div className="relative">
						<button
							onClick={() => setDropdownOpen(!dropdownOpen)}
							className="w-full px-6 py-5 text-lg rounded-lg bg-main font-semibold font-gilroy flex justify-between items-center"
						>
							{currentService.title}
							<svg
								className="w-4 h-4 ml-2"
								xmlns="http://www.w3.org/2000/svg"
								fill="none"
								viewBox="0 0 24 24"
								stroke="currentColor"
							>
								<path
									strokeLinecap="round"
									strokeLinejoin="round"
									strokeWidth={2}
									d="M19 9l-7 7-7-7"
								/>
							</svg>
						</button>

						{dropdownOpen && (
							<ul className="absolute z-50 mt-1 text-sm space-y-2 py-3 w-full rounded-lg bg-background overflow-hidden">
								{services?.map((service) => (
									<li
										key={service.id}
										onClick={() => {
											handleService(service.id);
											setDropdownOpen(false);
										}}
										className={`cursor-pointer px-5 py-2 text-sm ${
											currentServiceId === service.id
												? "bg-main text-background"
												: "bg-background text-accent"
										}`}
									>
										{service.title}
									</li>
								))}
							</ul>
						)}
					</div>
				</div>

				<section className="flex flex-col lg:flex-row w-full gap-12 py-6 ">
					<figure className="lg:w-2/4 lg:p-3 ">
						<Image
							className="w-full h-full object-cover rounded-lg"
							src={currentService?.image}
							alt="Servive image"
						/>
					</figure>
					<div className="lg:w-2/4 text-left">
						<h2 className="!text-[27px] !normal-case">
							{currentService?.title}
						</h2>
						<p className="text-justify opacity-70 leading-relaxed">
							{currentService?.desc}
						</p>
						<ul>
							{currentService?.list?.map((item, idx) => (
								<li
									key={idx}
									className="flex items-center opacity-80 gap-2 text-lg pb-3"
								>
									<GoDotFill className="text-main" />{" "}
									{item.item}
								</li>
							))}
						</ul>
					</div>
				</section>
			</div>
		</div>
	);
}
