"use client";
import React from "react";
import { useState } from "react";
import { useEffect } from "react";
import { FaAngleDown, FaAngleUp } from "react-icons/fa";
import { LuCircleDotDashed } from "react-icons/lu";

const solutions = [
	{
		id: 1,
		title: "Requirements and Design",
		btnName: "I",
		desc: "At this initial phase, RedHack Security evaluates security requirements and design decisions to build a strong foundation.",
		list: [
			{
				item: "Threat Modeling: Identify potential risks and attack vectors based on the system’s architecture and design.",
			},
			{
				item: "Security Architecture Assessment: Examine the design for any security weaknesses or gaps.",
			},
			{
				item: "Secure Design Review: Analyze design documents and code snippets for possible security flaws.",
			},
			{
				item: "Typical Risks: Weak authentication, flawed access controls, risk of data exposure.",
			},
		],
	},
	{
		id: 2,
		title: "Development",
		btnName: "II",
		desc: "During the development phase, RedHack Security focuses on identifying vulnerabilities within the source code and development practices.",
		list: [
			{
				item: "Static Code Analysis: Use automated tools to scan source code for security issues.",
			},
			{
				item: "Manual Code Review: Experts manually inspect code to find vulnerabilities missed by automation.",
			},
			{
				item: "Security-focused Unit Testing: Developers create tests targeting security aspects of the application.",
			},
			{
				item: "Common Risks: Injection flaws (SQLi, XSS), insecure API usage, cryptographic weaknesses.",
			},
		],
	},
	{
		id: 3,
		title: "Testing",
		btnName: "III",
		desc: "In this phase, the focus shifts to dynamic testing of the live application and comprehensive security validation.",
		list: [
			{
				item: "Dynamic Vulnerability Scanning: Simulate attacks on the running application using specialized tools.",
			},
			{
				item: "Manual Penetration Testing: Security experts manually probe the application to uncover hidden issues.",
			},
			{
				item: "Input Validation Tests: Test with malicious inputs to uncover data validation gaps.",
			},
			{
				item: "Frequent Vulnerabilities: Cross-site scripting, CSRF, broken authentication, sensitive data leaks.",
			},
		],
	},
	{
		id: 4,
		title: "Deployment",
		btnName: "IV",
		desc: "Before launching into production, RedHack Security verifies the security posture of the deployment environment.",
		list: [
			{
				item: "Configuration Audits: Review server and application configurations for security weaknesses.",
			},
			{
				item: "Network Security Assessments: Check firewalls, open ports, and network controls.",
			},
			{
				item: "Typical Issues: Misconfigurations, open or unnecessary ports, inadequate network defenses.",
			},
		],
	},
	{
		id: 5,
		title: "Maintenance",
		btnName: "V",
		desc: "Post-deployment, ongoing penetration testing helps detect vulnerabilities introduced by updates or environmental changes.",
		list: [
			{
				item: "Patch and Update Testing: Verify security patches do not introduce new risks.",
			},
			{
				item: "Regular Security Assessments: Conduct scheduled penetration tests to identify emerging threats.",
			},
			{
				item: "Common Concerns: Unpatched vulnerabilities, misconfigurations caused by updates or changes.",
			},
		],
	},
];

export default function DevsOpsSDLC() {
	const [currentServiceId, setCurrentServiceId] = useState(1);
	const [currentService, setCurrentService] = useState([]);

	console.log(currentService.list);
	const handleService = (id) => {
		const result = solutions.find((solution) => solution.id === id);
		setCurrentServiceId(id);
		setCurrentService(result);
	};

	useEffect(() => {
		handleService(1);
	}, []);

	const [openSolutions, setOpenSolutions] = useState({});
	const toggleSolution = (index) => {
		setOpenSolutions((prev) => ({
			...prev,
			[index]: !prev[index],
		}));
	};

	return (
		<div className="bg-accent text-background lg:py-20 py-12 lg:px-0 px-5 text-center">
			<div className="container">
				<h2>Penetration Testing Throughout All Phases of the SDLC</h2>
				<p className="opacity-80 lg:px-32">
					RedHack Security’s SDLC penetration testing evaluates the
					security of your application throughout each phase of its
					development lifecycle.
				</p>
				<section className="pt-10 space-y-3 hidden lg:block">
					<div className="text-background hidden md:grid lg:grid-cols-5 gap-5 mx-auto ">
						{solutions.map((solution) => (
							<button
								key={solution.id}
								onClick={() => handleService(solution.id)}
								className={`btn-service-card italic !text-3xl !py-3 ${
									currentServiceId === solution.id
										? "bg-background/10 backdrop-blur-2xl !rounded-t-2xl !rounded-b-none devOps-btn"
										: "bg-main"
								}`}
							>
								{solution.btnName}
							</button>
						))}
					</div>
					<div className=" bg-background/10 backdrop-blur-2xl rounded-b-xl pt-6 pb-10 px-10 text-left">
						<h2 className="text-main  !text-3xl">
							{currentService.title}
						</h2>
						<p>{currentService.desc}</p>
						<ul className="space-y-5">
							{currentService?.list?.map((item, idx) => (
								<li
									key={idx}
									className="flex items-center gap-4"
								>
									<LuCircleDotDashed className="text-xl text-main" />
									<span>{item.item}</span>
								</li>
							))}
						</ul>
					</div>
				</section>

				<ul className="font-gilroy block lg:hidden font-semibold uppercase text-lg space-y-4 pb-10 border-b border-background/5 ">
					{solutions.map((item, index) => (
						<li key={index}>
							{/* Main item (with or without submenu) */}
							<div>
								{item.list ? (
									<button
										onClick={() => toggleSolution(index)}
										className={`flex items-center justify-between w-full bg-background/10 text-background px-6 py-5 rounded-lg text-left ${
											openSolutions[index] && "bg-main"
										}`}
									>
										<span className="uppercase">
											{item.title}
										</span>
										<span>
											{openSolutions[index] ? (
												<FaAngleUp />
											) : (
												<FaAngleDown />
											)}
										</span>
									</button>
								) : (
									""
								)}
							</div>

							{/* Submenu */}
							{item.list && openSolutions[index] && (
								<ul className="dropdown mt-1 bg-background/10 space-y-3 backdrop-blur-2xl rounded-xl px-6 py-4 text-left">
									<h3 className="text-main !font-semibold">
										{item.title}
									</h3>
									{item?.list?.map((li, idx) => (
										<li
											className="!text-base normal-case font-normal flex items-center gap-3"
											key={idx}
										>
											<LuCircleDotDashed className="text-main w-6" />
											<span>{li.item}</span>
										</li>
									))}
								</ul>
							)}
						</li>
					))}
				</ul>
			</div>
		</div>
	);
}
